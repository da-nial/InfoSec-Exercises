import json
import socket

from flask import render_template
from flask import Flask

app = Flask(__name__)

SERVER_HOST = "127.0.0.1"
SERVER_PORT = 65432
BUFFER_SIZE = 2048

host_info_icons = {
    'host_name': 'fa-computer',
    'os': 'fa-opera',
    'kernel_version': 'fa-code-merge',
    'platform_architecture': 'fa-sitemap',
    'platform_machine': 'fa-sitemap',
    'platform_processor': 'fa-microchip',
    'registered_owner': 'fa-user',
    'original_install_date': 'fa-calendar-days',
    'system_boot_time': 'fa-clock',
    'system_up_time': 'fa-clock',
    'processor': 'fa-microchip',
    'system_locale': 'fa-language',
    'ip_address': 'fa-globe',
    'mac_address': 'fa-id-badge',
    'timezone': 'fa-earth-americas',
    'virtual_memory_max_size': 'fa-memory',
    'virtual_memory_available_size': 'fa-memory',
    'virtual_memory_in_use': 'fa-memory',
    'domain': 'fa-signature',
}

host_info_prefixes = {
    'host_name': '',
    'os': 'OS: ',
    'kernel_version': 'Version: ',
    'platform_architecture': 'Arch.: ',
    'platform_machine': 'Machine: ',
    'platform_processor': 'Processor: ',
    'registered_owner': 'Owner: ',
    'original_install_date': 'Installation: ',
    'system_boot_time': 'Boot: ',
    'system_up_time': 'Uptime: ',
    'processor': 'Processor: ',
    'system_locale': 'Locale: ',
    'ip_address': 'IP: ',
    'mac_address': 'MAC: ',
    'timezone': 'Timezone: ',
    'virtual_memory_max_size': 'Total memory: ',
    'virtual_memory_available_size': 'Free memory: ',
    'virtual_memory_in_use': 'Used memory: ',
    'domain': 'Domain: ',
}


def byte_json_string_to_dict(data: bytes) -> dict:
    return json.loads(data.decode('utf-8'))


server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.connect((SERVER_HOST, SERVER_PORT))


@app.route('/')
def get_host_info():
    server_socket.sendall(b'/get_host_info')
    host_info_bytes = server_socket.recv(BUFFER_SIZE)
    host_info_values = byte_json_string_to_dict(host_info_bytes)

    host_info = {}
    for key in host_info_values.keys():
        host_info[key] = {
            'value': host_info_values.get(key),
            'icon': host_info_icons.get(key),
            'prefix': host_info_prefixes.get(key)
        }
    return render_template('index.html', host_info=host_info)


@app.route('/disconnect')
def disconnect():
    server_socket.sendall(b'/get_host_info')
    return {'result': 'Disconnected successfully.'}
