import socket
import platform
import re
import os
import json
import logging
import locale
import time
import datetime
from uuid import getnode as get_mac

from dateutil.tz import tzlocal
import psutil

logging.basicConfig(level=logging.INFO)

SERVER_HOST = "127.0.0.1"
SERVER_PORT = 65432
BUFFER_SIZE = 2048


def get_host_info(conn: socket.socket):
    logging.info(f'command `/get_host_info` received')
    host_info = extract_host_info_mac_os()
    host_info_str = dict_to_byte_json_string(host_info)
    conn.sendall(host_info_str)
    logging.info(f'sent host_info: {host_info}')


def dict_to_byte_json_string(data: dict) -> bytes:
    return json.dumps(data, ensure_ascii=False).encode('utf-8')


def extract_host_info_mac_os() -> dict:
    virtual_memory = psutil.virtual_memory()
    boot_time = psutil.boot_time()
    timezone = datetime.datetime.now(tzlocal()).tzname()
    uptime = str(time.time() - boot_time)

    owner = os.getenv('USER')

    root_directory_creation_timestamp = os.stat('/').st_birthtime
    root_directory_creation_time = str(datetime.datetime.fromtimestamp(root_directory_creation_timestamp))

    domain = socket.getfqdn().split('.', 1)[1]

    host_info = {
        'host_name': platform.node(),
        'os': platform.system(),
        'kernel_version': platform.release(),
        'platform_architecture': platform.architecture()[0],
        'platform_machine': platform.machine(),
        'platform_processor': platform.processor(),
        'registered_owner': owner,
        'original_install_date': root_directory_creation_time,
        'system_boot_time': boot_time,
        'system_up_time': uptime,
        'processor': platform.processor(),
        'system_locale': locale.getdefaultlocale()[0],
        'ip_address': socket.gethostbyname(socket.gethostname()),
        'mac_address': get_mac(),
        'timezone': timezone,
        'virtual_memory_max_size': virtual_memory.total,
        'virtual_memory_available_size': virtual_memory.free,
        'virtual_memory_in_use': virtual_memory.used,
        'domain': domain,
    }
    return host_info


def extract_host_info_windows() -> dict:
    values = {}
    cache = os.popen2("SYSTEMINFO")
    source = cache[1].read()
    sysOpts = ["Host Name", "OS Name", "OS Version", "Product ID", "System Manufacturer", "System Model", "System type",
               "BIOS Version", "Domain", "Windows Directory", "Total Physical Memory", "Available Physical Memory",
               "Logon Server"]
    for opt in sysOpts:
        values[opt] = [item.strip() for item in re.findall("%s:\w*(.*?)\n" % (opt), source, re.IGNORECASE)][0]
    return values


def disconnect(conn):
    logging.info('command `disconnect` received')
    exit(0)


def serve():
    command_table = {
        '/get_host_info': get_host_info,
        '/disconnect': disconnect
    }
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((SERVER_HOST, SERVER_PORT))
        while True:
            command = s.recv(BUFFER_SIZE).decode('utf-8')
            command_fn = command_table.get(command)
            if command_fn is None:
                logging.warning(f'Invalid command {command} received')
                continue
            command_fn(conn=s)


if __name__ == '__main__':
    serve()
